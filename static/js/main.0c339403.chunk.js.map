{"version":3,"sources":["modules/Configuration.js","modules/utilities/CsvParser.js","modules/utilities/CreateUuid.js","modules/utilities/SaveAsFile.js","modules/utilities/GetFilenameType.js","modules/utilities/GetDeckIdentityClass.js","modules/utilities/SetIdentity.js","modules/DeckParser/CreateDeckFrom.js","modules/DeckParser/CreateDeckFromCsv.js","modules/DeckParser/CreateDeckFromTxt.js","modules/DeckParser/CreateDeckFromJson.js","modules/DeckParser/CreateDeckFromDek.js","modules/DeckExporter/ExportAsMtga.js","modules/DeckExporter/ExportAsTxt.js","modules/DeckExporter/ExportAsDec.js","modules/Decks/DeckList.js","modules/Decks/DeckParse.js","modules/ErrorPages/index.js","modules/Decks/ViewDeck.js","modules/Decks/Overview.js","modules/Decks/Index.js","modules/Collection/Summary.js","modules/Collection/Import.js","modules/Collection/Overview.js","modules/Collection/Index.js","store/state.js","store/reducer.js","store/index.js","Router/App.js","serviceWorker.js","index.js"],"names":["Configuration","props","dispatch","useDispatch","className","onClick","type","history","push","CSVToArray","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedValue","strMatchedDelimiter","length","replace","CreateUuid","Array","from","map","e","i","someRandomValue","Date","Math","random","indexOf","toString","join","SaveAsFile","text","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","GetFilenameType","toLowerCase","endsWith","GetDeckIdentityClass","deck","types","undefined","colorIdentity","SetIdentity","a","commander","cards","filter","x","fetch","name","then","json","data","identity","color_identity","sort","card_faces","coverArt","image_uris","art_crop","CreateDeckFrom","CreateDeckFromCsv","CreateDeckFromTxt","CreateDeckFromJson","CreateDeckFromDek","id","success","error","firstLine","trim","split","delim","CsvToArray","header","shift","headerIndex","forEach","val","item","get","key","invoke","card","count","parseInt","set","number","foil","price","parseFloat","currency","multiverseId","scryfallId","proxy","edition","lineToCard","lines","category","startsWith","parts","sideboard","collectors","match","JSON","parse","ExportAsMtga","ToLine","main","list","concat","ExportAsTxt","ExportAsDec","AsTable","columns","Set","keys","Object","add","width","entries","Headers","GetVal","Columns","Lines","DeckList","useState","view","setView","stringify","AsJson","AsList","GetList","connect","state","setName","setData","setType","setDeck","parseError","result","href","action","onSubmit","onChange","file","target","files","fr","FileReader","onload","readAsText","htmlFor","value","changeName","NotFound","decks","params","deckIndex","setCommander","index","options","selectedIndex","selected","Liste","slice","picture","src","alt","to","activeClassName","path","component","DeckParse","ViewDeck","Overview","callback","reduce","n","sum","liste","title","icon","round","lagStats","Summary","Checkbox","setState","checked","defaultChecked","newDecks","setNewDecks","overwrite","setOverwrite","collection","newDeckData","Import","initialState","stateVersion","reducer","findIndex","newState","localStorage","clear","getInitialState","getItem","reduceState","setItem","store","React","createContext","createStore","IndexPage","App","basename","exact","DeckOverview","CollectionOverview","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c339403.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst Configuration = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  function reset() {\r\n    dispatch({ type: \"RESET\" });\r\n    props.history.push('/');\r\n  }\r\n\r\n  return (<>\r\n    <div className=\"Main\">\r\n    <h1>Configuration</h1>\r\n    <button onClick={reset}>\r\n      Reset localstorage\r\n    </button>\r\n    </div>\r\n  </>);\r\n}\r\n\r\nexport default Configuration;","// ref: http://stackoverflow.com/a/1293163/2343\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nconst CSVToArray = ( strData, strDelimiter ) => {\r\n    // Check to see if the delimiter is defined. If not,\r\n    // then default to comma.\r\n    strDelimiter = (strDelimiter || \",\");\r\n  \r\n    // Create a regular expression to parse the CSV values.\r\n    var objPattern = new RegExp(\r\n        (\r\n            // Delimiters.\r\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n  \r\n            // Quoted fields.\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n  \r\n            // Standard fields.\r\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n        ),\r\n        \"gi\"\r\n        );\r\n  \r\n  \r\n    // Create an array to hold our data. Give the array\r\n    // a default empty first row.\r\n    var arrData = [[]];\r\n  \r\n    // Create an array to hold our individual pattern\r\n    // matching groups.\r\n    var arrMatches = null;\r\n  \r\n  \r\n    // Keep looping over the regular expression matches\r\n    // until we can no longer find a match.\r\n    // eslint-disable-next-line\r\n    while (arrMatches = objPattern.exec( strData )){\r\n  \r\n        // Get the delimiter that was found.\r\n        var strMatchedDelimiter = arrMatches[ 1 ];\r\n  \r\n        // Check to see if the given delimiter has a length\r\n        // (is not the start of string) and if it matches\r\n        // field delimiter. If id does not, then we know\r\n        // that this delimiter is a row delimiter.\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            strMatchedDelimiter !== strDelimiter\r\n            ){\r\n  \r\n            // Since we have reached a new row of data,\r\n            // add an empty row to our data array.\r\n            arrData.push( [] );\r\n  \r\n        }\r\n  \r\n        var strMatchedValue;\r\n  \r\n        // Now that we have our delimiter out of the way,\r\n        // let's check to see which kind of value we\r\n        // captured (quoted or unquoted).\r\n        if (arrMatches[ 2 ]){\r\n  \r\n            // We found a quoted value. When we capture\r\n            // this value, unescape any double quotes.\r\n            strMatchedValue = arrMatches[ 2 ].replace(\r\n                new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                \"\\\"\"\r\n                );\r\n  \r\n        } else {\r\n  \r\n            // We found a non-quoted value.\r\n            strMatchedValue = arrMatches[ 3 ];\r\n  \r\n        }\r\n  \r\n  \r\n        // Now that we have our value string, let's add\r\n        // it to the data array.\r\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\r\n    }\r\n  \r\n    // Return the parsed data.\r\n    return( arrData );\r\n  }\r\n\r\n  export default CSVToArray;","const CreateUuid = () => {\r\n    return Array.from(Array(32))\r\n    .map((e, i) => {\r\n      let someRandomValue = i === 12 ? 4 : (+new Date() + Math.random() * 16) % 16 | 0;\r\n      return `${~[8, 12, 16, 20].indexOf(i) ? \"-\" : \"\"}${\r\n        // eslint-disable-next-line\r\n        (i === 16 ? someRandomValue & 0x3 | 0x8 : someRandomValue).toString(16)}`;\r\n    }).join(\"\");\r\n}\r\n\r\nexport default CreateUuid;","function SaveAsFile(text, filename) {\r\n  filename = filename.replace(\"/[^a-zA-Z0-9\\\\.\\\\-]/ig\", \"_\");\r\n  var element = document.createElement('a');\r\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n  element.setAttribute('download', filename);\r\n  element.style.display = 'none';\r\n  document.body.appendChild(element);\r\n  element.click();\r\n  document.body.removeChild(element);\r\n}\r\n\r\nexport default SaveAsFile;","function GetFilenameType(filename) {\r\n  filename = filename || \"\";\r\n  if (filename.toLowerCase().endsWith('.csv')) {\r\n    return \"csv\";\r\n  }\r\n\r\n  if (filename.toLowerCase().endsWith('.json')) {\r\n    return \"json\";\r\n  }\r\n\r\n  if (filename.toLowerCase().endsWith('.txt')) {\r\n    return \"txt\";\r\n  }\r\n\r\n  if (filename.toLowerCase().endsWith('.dec')) {\r\n    return \"dec\";\r\n  }\r\n\r\n  if (filename.toLowerCase().endsWith('.dek')) {\r\n    return \"dek\";\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default GetFilenameType;","const GetDeckIdentityClass = (deck) => {\r\n  var type = \"planeswalker\";\r\n\r\n  var types = {\r\n    \"\": \"c\",\r\n\r\n    \"W\": \"w\",\r\n    \"U\": \"u\",\r\n    \"B\": \"b\",\r\n    \"R\": \"r\",\r\n    \"G\": \"g\",\r\n\r\n    \"UW\": \"guild-azorius\",\r\n    \"BW\": \"guild-orzhov\",\r\n    \"RW\": \"guild-boros\",\r\n    \"GW\": \"guild-selesnya\",\r\n    \"BU\": \"guild-dimir\",\r\n    \"BG\": \"guild-golgari\",\r\n    \"GR\": \"guild-gruul\",\r\n    \"RU\": \"guild-izzet\",\r\n    \"BR\": \"guild-rakdos\",\r\n    \"GU\": \"guild-simic\",\r\n\r\n    \"BGW\": \"clan-abzan\",\r\n    \"RUW\": \"clan-jeskai\",\r\n    \"BRW\": \"clan-mardu\",\r\n    \"BGU\": \"clan-sultai\",\r\n    \"GRU\": \"clan-temur\",\r\n\r\n    \"BGR\": \"clan-atarka\",\r\n    \"GUW\": \"clan-dromoka\",\r\n    \"BRU\": \"clan-kolaghan\",\r\n    \"BUW\": \"clan-ojutai\",\r\n    \"GRW\": \"clan-silumgar\",\r\n\r\n    \"GRUW\": \"planeswalker\",\r\n    \"BRUW\": \"planeswalker\",\r\n    \"BGUW\": \"planeswalker\",\r\n    \"BGRW\": \"planeswalker\",\r\n    \"BGRU\": \"planeswalker\",\r\n\r\n    \"BGRUW\": \"planeswalker\",\r\n  };\r\n\r\n  if (deck.colorIdentity !== undefined && types[deck.colorIdentity]) {\r\n    type = types[deck.colorIdentity];\r\n  }\r\n\r\n  return \"ms-\" + type;\r\n}\r\n\r\nexport default GetDeckIdentityClass;\r\n","const SetIdentity = async (deck) => {\r\n  var commander = deck.cards.filter(x => x.commander);\r\n  if (commander) {\r\n    try {\r\n      return await fetch('https://api.scryfall.com/cards/named?fuzzy=' + encodeURIComponent(commander[0].name))\r\n      .then(x => x.json())\r\n      .then(data => {\r\n        var identity = data.color_identity;\r\n        identity.sort();\r\n        deck.colorIdentity = identity.join('');\r\n        if (data.card_faces) {\r\n          deck.coverArt = data.card_faces[0].image_uris.art_crop;\r\n        }\r\n        else if (data.image_uris) {\r\n          deck.coverArt = data.image_uris.art_crop;\r\n        }\r\n        return deck;\r\n      });\r\n    } catch { \r\n      return deck;\r\n    }\r\n  }\r\n}\r\n\r\nexport default SetIdentity;","import { CreateDeckFromCsv, CreateDeckFromJson, CreateDeckFromTxt, CreateDeckFromDek } from '.'\r\nimport { CreateUuid } from '../utilities'\r\n\r\nconst CreateDeckFrom = (text, type, name) => {\r\n  var deck;\r\n  switch (type) {\r\n    case \"csv\":\r\n      deck = CreateDeckFromCsv(text, name);\r\n      break;\r\n\r\n    case \"txt\":\r\n      deck = CreateDeckFromTxt(text, name);\r\n      break;\r\n\r\n    case \"json\":\r\n      deck = CreateDeckFromJson(text, name);\r\n      break;\r\n\r\n    case \"dec\":\r\n    case \"dek\":\r\n      deck = CreateDeckFromDek(text, name);\r\n      break;\r\n\r\n    default:\r\n      deck = null;\r\n  }\r\n\r\n  if (deck !== null) {\r\n    deck.id = CreateUuid();\r\n    return {\r\n      success: true,\r\n      deck: deck\r\n    };\r\n  }\r\n\r\n  return { \r\n    success: false,\r\n    error: \"Unsupported format\",\r\n  };\r\n};  \r\n\r\nexport default CreateDeckFrom;","import { CsvToArray } from '../utilities'\r\n\r\nconst CreateDeckFromCsv = (text, name) => {\r\n  var firstLine = text.trim().split('\\n')[0];\r\n  var delim = firstLine.indexOf('\\t') > -1 ? '\\t' : undefined;\r\n  if (delim === undefined) delim = firstLine.indexOf(';') > -1 ? ':' : undefined;\r\n  if (delim === undefined) delim = firstLine.indexOf(',') > -1 ? ',' : undefined;\r\n\r\n  var cards = CsvToArray(text.trim(), delim);\r\n  \r\n  var header = cards[0];\r\n  cards.shift();\r\n\r\n  var headerIndex = {};\r\n  header.forEach((val) => {\r\n    headerIndex[val] = header.indexOf(val);\r\n  });\r\n  \r\n  function lineToCard(item) {\r\n    function get(key, invoke) {\r\n      var val = headerIndex[key] !== undefined && headerIndex[key] > -1 ? item[headerIndex[key]] : undefined;\r\n      if (invoke && val !== undefined) val = invoke(val);\r\n      return val;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    function getRaw() {\r\n      var raw = {};\r\n      header.forEach((val) => {\r\n        raw[val] = item[headerIndex[val]];\r\n      });\r\n      return raw;\r\n    }\r\n    \r\n    var card = {\r\n      name: get(\"Name\"),\r\n      count: get(\"QuantityX\", x => parseInt(x.replace('x', ''))),\r\n      set: get(\"Edition code\"),\r\n      number: get(\"Collector's number\"),\r\n      foil: get(\"Foil\", x => x === \"Foil\"),\r\n      price: get(\"Price (total)\", x => parseFloat(x)),\r\n      currency: get(\"Currency\"),\r\n      multiverseId: get(\"MultiverseID\"),\r\n      scryfallId: get(\"Scryfall ID\"),\r\n      proxy: get(\"Tag\", x => x.indexOf(\"Proxy\") > -1),\r\n      //raw: getRaw()\r\n    };\r\n\r\n    card.price = card.price || get(\"Price\", x => parseFloat(x.split(' ')[1]));\r\n    card.currency = card.currency || get(\"Price\", x => x.split(' ')[0]);\r\n    card.edition = card.edition || get(\"Edition\");\r\n\r\n    return card;\r\n  }\r\n\r\n  return {\r\n    name: name,\r\n    cards: cards.map(x => lineToCard(x))\r\n  };\r\n};  \r\n\r\nexport default CreateDeckFromCsv;","const CreateDeckFromTxt = (text, name) => {\r\n  var lines = text.trim().replace(/\\r/ig, '').replace(/\\t/ig, ' ').replace(/ +/ig, ' ').split('\\n');\r\n  var category = null;\r\n\r\n  var cards = lines.map(x => {\r\n    if (x.length === 0) {\r\n      category = \"Sideboard\";\r\n      return null;\r\n    }\r\n\r\n    if (x.startsWith('//')) {\r\n      return null;\r\n    }\r\n\r\n    var parts = x.split(' ');\r\n    var sideboard = false;\r\n    var edition = null;\r\n    var collectors = null;\r\n\r\n    if (x.match(/^[a-zA-Z]+$/))  {\r\n      category = x;\r\n      return null;\r\n    }\r\n    if (parts[0] === \"SB:\") {\r\n      sideboard = true;\r\n      parts.shift();\r\n    }\r\n    var count = parseInt(parts[0].replace(/x/ig, \"\"));\r\n    parts.shift();\r\n    var name = parts.join(' ');\r\n    var match = name.match(/(.*?) \\(([a-z0-9]+)\\) ([a-z0-9]+)$/i);\r\n\r\n    if (match) {\r\n      name = match[1];\r\n      edition = match[2];\r\n      collectors = match[3];\r\n    }\r\n\r\n    match = name.match(/(.*?) \\(([a-z0-9]+)\\)$/i);\r\n    if (match) {\r\n      name = match[1];\r\n      edition = match[2];\r\n    }\r\n\r\n    return {\r\n      count: count,\r\n      name: name,\r\n      set: edition ? edition : undefined,\r\n      number: collectors ? collectors : undefined,\r\n      sideboard: category === \"Sideboard\" || sideboard ? true : undefined,\r\n      category: category && category !== \"Sideboard\" ? category : undefined\r\n    };\r\n  });\r\n\r\n  return {\r\n    name: name,\r\n    cards: cards.filter(x => x)\r\n  };\r\n};  \r\n\r\nexport default CreateDeckFromTxt;","const CreateDeckFromJson = (text, name) => {\r\n  var deck = JSON.parse(text);\r\n  if (!deck.cards) {\r\n    return null;\r\n  }\r\n  return {\r\n    ...deck,\r\n    name: name\r\n  };\r\n};  \r\n\r\nexport default CreateDeckFromJson;","const CreateDeckFromDek = (text, name) => {\r\n  var lines = text.trim().replace(/\\r/ig, '').replace(/\\t/ig, ' ').replace(/ +/ig, ' ').split('\\n');\r\n\r\n  var cards = lines.map(x => {\r\n    if (x.startsWith('//') || x.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var parts = x.split(' ');\r\n\r\n    var sideboard = false; \r\n    if (parts[0] === \"SB:\") {\r\n      sideboard = true;\r\n      parts.shift();\r\n    }\r\n\r\n    var count = parseInt(parts[0].replace(/x/ig, \"\"));\r\n    parts.shift();\r\n    var name = parts.join(' ');\r\n\r\n    return {\r\n      count: count,\r\n      name: name,\r\n      sideboard: sideboard ? true : undefined,\r\n    };\r\n  });\r\n\r\n  return {\r\n    name: name,\r\n    cards: cards.filter(x => x)\r\n  };\r\n};  \r\n\r\nexport default CreateDeckFromDek;","const ExportAsMtga = (deck) => {\r\n\r\n  const ToLine = x => x.count + ' ' + x.name + (x.set && x.number ? (\" (\"+x.set+\") \" + x.number) : \"\");\r\n\r\n  var main = deck.cards.filter(x => !x.sideboard);\r\n  var sideboard = deck.cards.filter(x => x.sideboard);\r\n\r\n  var list = main.map(ToLine);\r\n  list = list.concat([\"\"]);\r\n  list = list.concat(sideboard.map(ToLine));\r\n\r\n  return list.join('\\n');\r\n};  \r\n\r\nexport default ExportAsMtga;\r\n","const ExportAsTxt = (deck) => {\r\n  return deck.cards.map(x => (x.sideboard ? \"SB: \" : \"\") + x.count + ' ' + x.name).join('\\n');\r\n};  \r\n\r\nexport default ExportAsTxt;\r\n","const ExportAsDec = (deck) => {\r\n  return deck.cards.map(x => (x.sideboard ? \"SB: \" : \"\") + x.count + ' ' + x.name).join('\\n');\r\n};  \r\n\r\nexport default ExportAsDec;\r\n","import React, { useState } from 'react';\r\nimport { ExportAsMtga } from '../DeckExporter';\r\n\r\n\r\nfunction AsTable(deck) {\r\n  function Headers(columns) {\r\n    return <>{Object.entries(columns).map(([key, val]) => (\r\n      <th key={val}>{val}</th>\r\n    ))}</>\r\n  }\r\n\r\n  function GetVal(val) {\r\n    if (val === undefined) return \"\";\r\n    if (typeof(val) == \"boolean\") return val ? \"X\" : \"\";\r\n    return val;\r\n  }\r\n\r\n  function Columns(card, columns) {\r\n    return <>{Object.entries(columns).map(([key, val]) => (\r\n      <td key={val}>{GetVal(card[val])}</td>\r\n    ))}</>\r\n  }\r\n\r\n  function Lines(cards, columns) {\r\n    return <>{Object.entries(cards).map(([key, val]) => (\r\n      <tr key={key}>{Columns(val, columns)}</tr>\r\n    ))}</>\r\n  }\r\n\r\n  var columns = new Set();\r\n  for (var item in deck.cards)  {\r\n    var keys = Object.keys(deck.cards[item]);\r\n    for (var i in keys) {\r\n      columns.add(keys[i]);\r\n    }\r\n  } \r\n\r\n  columns = Array.from(columns);\r\n\r\n  return <table width='100%'><thead><tr>{Headers(columns)}</tr></thead><tbody>{Lines(deck.cards, columns)}</tbody></table>\r\n}\r\n\r\nfunction AsList(deck) {\r\n  return <pre>{ExportAsMtga(deck)}</pre>;\r\n}\r\n\r\nfunction AsJson(deck) {\r\n  return  <pre>{JSON.stringify(deck, null, 2)}</pre>;\r\n}\r\n\r\nconst DeckList = ({ deck }) => {\r\n  const [view, setView] = useState(\"table\");\r\n\r\n  function GetList(view) {\r\n    switch (view) {\r\n      case \"table\":\r\n        return AsTable(deck);\r\n      case \"json\":\r\n        return AsJson(deck);\r\n      default:\r\n        return AsList(deck);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='deckListContainer'>\r\n      <ul className='view'>\r\n        <button className={view === \"table\" ? \"active\" : \"\"} onClick={() => setView(\"table\")}>Table</button>\r\n        <button className={view === \"list\" ? \"active\" : \"\"} onClick={() => setView(\"list\")}>List view</button>\r\n        <button className={view === \"json\" ? \"active\" : \"\"} onClick={() => setView(\"json\")}>JSON</button>\r\n      </ul>\r\n      <div className='list'>{GetList(view)}</div>\r\n    </div>);\r\n}\r\n\r\nexport default DeckList;","import React, { useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { connect } from 'react-redux';\r\nimport { CreateDeckFrom } from '../DeckParser'\r\nimport { GetFilenameType } from '../utilities'\r\nimport DeckList from \"./DeckList\";\r\n\r\nconst DeckParse = ({ history }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [data, setData] = useState(null);\r\n  const [type, setType] = useState(null);\r\n  const [deck, setDeck] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let parseError = \"\";\r\n  if (data && deck === null) {\r\n    var result = CreateDeckFrom(data, type, name);\r\n    if (result.success) {\r\n      setDeck(result.deck);\r\n    }\r\n    else {\r\n      parseError = result.error;\r\n    }\r\n  }\r\n\r\n  let readFile = (e) => {\r\n    var fileInput = e.target;\r\n    var file = fileInput.files[0];\r\n    if (file) {\r\n      var fr = new FileReader();\r\n      fr.onload = (e) => {\r\n        setData(e.target.result);\r\n        setType(GetFilenameType(file.name));\r\n        setName(file.name);\r\n        setDeck(null);\r\n      };\r\n      fr.readAsText(file);\r\n    }\r\n  };\r\n\r\n  let changeName = (name) => {\r\n    setName(name);\r\n    setDeck(null);\r\n  };\r\n\r\n  let saveDeck = () => {\r\n    dispatch({ type: \"SAVEDECK\", deck: deck });\r\n    setDeck(null);\r\n    setData(null);\r\n    history.push(deck.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <h1>Import a new deck</h1>\r\n    <section>\r\n\r\n    <p>Import most standard deck formats. Use .txt file extension if you are unsure. Tetst files can be found at <a href='https://github.com/martsve/deckjson/'>Github</a>. \r\n      (\r\n      <a href='https://raw.githubusercontent.com/martsve/deckjson/master/test/delver.csv'>Delver lens csv</a>,\r\n      <a href='https://raw.githubusercontent.com/martsve/deckjson/master/test/arena.txt'>Arena list</a>,\r\n      <a href='https://raw.githubusercontent.com/martsve/deckjson/master/test/mtgo.txt'>MTGO list</a>,\r\n      <a href='https://raw.githubusercontent.com/martsve/deckjson/master/test/misc.dec'>Misc dec/dek file</a>,\r\n      <a href='https://raw.githubusercontent.com/martsve/deckjson/master/test/strange.txt'>Guess file</a>,\r\n      )\r\n    </p>\r\n\r\n    <form key='inputform' action='#' onSubmit={() => false}>\r\n      <input key='fileinput' type='file' id='fileinput' onChange={readFile} />\r\n    </form>\r\n    </section>\r\n\r\n    {deck ? (<section>\r\n      <div className='form-group'>\r\n        <label htmlFor='deckNameInput'>Deck name</label>  \r\n        <input id='deckNameInput' value={name} onChange={e => changeName(e.target.value)} />\r\n\r\n        <button onClick={saveDeck}>\r\n          <span className='icon-plus'></span>\r\n        </button>\r\n      </div>\r\n\r\n      <DeckList deck={deck} />\r\n      </section>) : <></>}\r\n\r\n    {parseError && <section className='error'>{parseError}</section>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n\r\n}))(DeckParse);\r\n","import React from 'react';\r\n\r\nconst NotFound = () => <div className=\"Main\"><h1>Not found</h1></div>\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport NotFound from '../ErrorPages';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SaveAsFile, SetIdentity, GetDeckIdentityClass } from \"../utilities\";\r\nimport { ExportAsMtga, ExportAsTxt, ExportAsDec } from \"../DeckExporter\";\r\nimport DeckList from \"./DeckList\";\r\n\r\nconst ViewDeck = ({ history, match, decks }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  var id = match.params.id;\r\n  var deck = { ...decks.filter(x => x.id === id)[0] };\r\n  if (!deck) {\r\n    return <NotFound />\r\n  }\r\n\r\n  var deckIndex = decks.indexOf(decks.filter(x => x.id === id)[0]);\r\n\r\n  function deleteDeck() {\r\n    dispatch({ type: \"DELETEDECK\", id: id });\r\n    history.push(\"/decks\");\r\n  }\r\n\r\n  function exportJson() {\r\n    SaveAsFile(JSON.stringify(deck, null, 2), deck.name + \".json\");\r\n  }\r\n\r\n  function exportText() {\r\n    SaveAsFile(ExportAsTxt(deck), deck.name + \".txt\");\r\n  }\r\n\r\n  function exportMtga() {\r\n    SaveAsFile(ExportAsMtga(deck), deck.name + \".clip\");\r\n  }\r\n\r\n  function exportDec() {\r\n    SaveAsFile(ExportAsDec(deck), deck.name + \".dek\");\r\n  }\r\n\r\n  const setCommander = async (index) => {\r\n    for (var item in deck.cards) {\r\n      deck.cards[item].commander = undefined;\r\n    }\r\n\r\n    if (index === 0) {\r\n      dispatch({ type: \"UPDATEDECK\", deck: deck });\r\n    }\r\n    else {\r\n      deck.cards[index - 1].commander = true;\r\n      deck = await SetIdentity(deck);\r\n      dispatch({ type: \"UPDATEDECK\", index: deckIndex, deck: deck });\r\n      // TODO: does not cause new render. why?\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <h1><i className={\"large ms \" + GetDeckIdentityClass(deck)} ></i> {deck.name}</h1>\r\n\r\n    <div className='buttons'>\r\n      Set commander: {\" \"}\r\n      <select onChange={async (e) => await setCommander(parseInt(e.target.options[e.target.selectedIndex].value))}>\r\n        <option value='0'></option>\r\n        {deck.cards.map( (card, key) => {\r\n          return <option selected={card.commander ? \"selected\" : \"\"} key={key} value={parseInt(key) + 1}>{card.name}</option>;\r\n        })}\r\n      </select>\r\n    </div>\r\n\r\n    <div className='buttons'>\r\n      <button onClick={exportJson}>\r\n        Export deck as JSON\r\n      </button>\r\n\r\n      <button onClick={exportText}>\r\n        Export deck as text file\r\n      </button>\r\n      \r\n      <button onClick={exportMtga}>\r\n        Export deck as MTGA clipboard\r\n      </button>\r\n\r\n      <button onClick={exportDec}>\r\n        Export deck as MTGO .dek\r\n      </button>\r\n\r\n      <button onClick={deleteDeck}>\r\n        <span className='icon-trash-empty'></span>\r\n      </button>\r\n    </div>\r\n\r\n    <DeckList deck={deck} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n  decks: state.decks,\r\n}))(ViewDeck);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport { GetDeckIdentityClass } from '../utilities';\r\n\r\nconst Liste = ({ list }) => {\r\n  return Object.entries(list.slice(0, 10)).map( ([key, card]) => {\r\n    var picture = <i className={\"large ms \" + GetDeckIdentityClass(card)} ></i>;\r\n    if (card.coverArt) {\r\n      picture = <img src={card.coverArt} width='100' alt='deck cover art' />;\r\n    }\r\n\r\n    return (\r\n      <Link className='tile' key={key} to={\"/decks/\" + card.id}>\r\n        <div className='container'>\r\n          <div className='art'>\r\n            {picture}\r\n          </div>\r\n          <span className='title'>{card.name}</span>      \r\n        </div>\r\n      </Link>\r\n    );\r\n  });\r\n}\r\n\r\nconst Overview = ({ decks }) => {\r\n  return (\r\n    <>\r\n    <section>\r\n      <h2>New decks</h2>\r\n      <div className='tiles'>\r\n        <Link to='/decks/import' className='tile'>\r\n          <div className='container'>\r\n            <div className='art'>\r\n              <span className='icon-plus large'></span>\r\n            </div>\r\n            <span className='title'>Import a deck</span>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    </section>\r\n\r\n    <section>\r\n      <h2>Your collection</h2>\r\n      <div className=\"tiles\">\r\n        <Liste list={decks} />\r\n      </div>\r\n    </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n  decks: state.decks,\r\n}))(Overview);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink, Switch, Route } from 'react-router-dom'\r\nimport DeckParse from './DeckParse';\r\nimport ViewDeck from './ViewDeck';\r\nimport NotFound from '../ErrorPages';\r\nimport Overview from './Overview';\r\nimport { GetDeckIdentityClass } from '../utilities';\r\n\r\nconst Liste = ({ list }) => {\r\n  return (\r\n    <ul>\r\n      {Object.entries(list).map( ([key, value]) => (\r\n      <li key={key}>\r\n        <NavLink activeClassName='active' to={\"/decks/\" + value.id}>\r\n          <span className='title'>\r\n            <i className={\"ms \" + GetDeckIdentityClass(value)} ></i> {\" \"}\r\n            {value.name}\r\n          </span>           \r\n        </NavLink>\r\n      </li>\r\n      ))}\r\n      \r\n      <li key=\"import\">\r\n      <NavLink activeClassName='active' to=\"/decks/import\">\r\n        <span className='title'><span className='icon-plus'></span> Import</span>           \r\n      </NavLink>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst Index = ({ decks }) => {\r\n  return (\r\n    <>\r\n    <div className='SideBar'>\r\n      <Liste list={decks} />\r\n    </div>\r\n    <div className=\"Main\">\r\n      <Switch>\r\n        <Route path=\"/decks/import\" component={DeckParse} />\r\n        <Route path=\"/decks/:id\" component={ViewDeck} />\r\n        <Route path=\"/decks\" component={Overview} />\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n  decks: state.decks,\r\n}))(Index);\r\n","import React from 'react';\r\n\r\nconst lagStats = (decks) => {\r\n  var liste = [];\r\n  var cards = decks.reduce((n, x) => {\r\n    return n.concat(x.cards);\r\n  }, []);\r\n\r\n  liste.push({ title: \"Decks\", icon: \"thumbs-up\", text: decks.length });\r\n  liste.push({ title: \"Cards\", icon: \"smile\", text: sum(cards, x => x.count) });\r\n  liste.push({ title: \"Proxies\", icon: \"thumbs-down\", text: count(cards, x => x.proxy) });\r\n  liste.push({ title: \"Value\", icon: \"frown\", text: Math.round(sum(cards, x => x.proxy ? 0 : x.price), 0) + '$' });\r\n  liste.push({ title: \"Proxy value\", icon: \"frown\", text: Math.round(sum(cards, x => x.proxy ? x.price : 0), 0) + '$' });\r\n  liste.push({ title: \"Unique cards\", icon: \"meh\", text: set(cards, x => x.name).length });\r\n\r\n  return liste;\r\n};\r\n\r\nconst set = (list, callback) => Array.from(list.reduce((n, x) => {\r\n  n.add(callback(x));\r\n  return n;\r\n}, new Set()));\r\n\r\nconst count = (list, callback) => list.reduce((n, x) => {\r\n  return n + (callback(x) ? 1 : 0);\r\n}, 0);\r\n\r\nconst sum = (list, callback) => list.reduce((n, x) => {\r\n  var val = callback(x);\r\n  return n + (val ? parseFloat(val) : 0);\r\n}, 0);\r\n\r\nconst Liste = ({ decks }) => {\r\n  var list = lagStats(decks);\r\n  return Object.entries(list).map( ([i, item]) => {\r\n    return (\r\n      <div key={i} className='tile'>\r\n        <div className='container'>\r\n          <div className='art'>\r\n            <span className={\"icon-\" + item.icon + \" large\"}></span>\r\n          </div>\r\n          <span className='title'>{item.title}: {item.text}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nexport const Summary = ({ decks }) => {\r\n  return (\r\n    <>\r\n    <section>\r\n      <h2>Collection summary</h2>\r\n      <div className=\"tiles\">\r\n        <Liste decks={decks} />\r\n      </div>\r\n    </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Summary;","import React, { useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { connect } from 'react-redux';\r\nimport CollectionSummary from './Summary';\r\nimport { GetDeckIdentityClass } from '../utilities';\r\n\r\nconst Liste = ({ list }) => {\r\n  return Object.entries(list.slice(0, 10)).map( ([key, card]) => {\r\n    var picture = <i className={\"large ms \" + GetDeckIdentityClass(card)} ></i>;\r\n    if (card.coverArt) {\r\n      picture = <img src={card.coverArt} width='100' alt='deck cover art' />;\r\n    }\r\n\r\n    return (\r\n      <div className='tile' key={key}>\r\n        <div className='container'>\r\n          <div className='art'>\r\n            {picture}\r\n          </div>\r\n          <span className='title'>{card.name}</span>      \r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nvar Checkbox = ({ state, setState }) => {\r\n  return <input type=\"checkbox\" onClick={(e) => {\r\n    setState(e.target.checked);\r\n  }} defaultChecked={state}></input>\r\n};\r\n\r\nconst Import = ({ history, decks }) => {\r\n  const [data, setData] = useState(null);\r\n  const [newDecks, setNewDecks] = useState(null);\r\n  const [overwrite, setOverwrite] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let parseError = \"\";\r\n  if (data && newDecks === null) {\r\n    try {\r\n      var json = JSON.parse(data);\r\n      var collection = json.decks;\r\n      if (!collection) {\r\n        parseError = \"No decks found in the file.\";\r\n      }\r\n      else {\r\n        setNewDecks(collection);\r\n      }\r\n    }\r\n    catch {\r\n      parseError = \"Unable to parse collection file.\";\r\n    }\r\n  }\r\n\r\n  let readFile = (e) => {\r\n    var fileInput = e.target;\r\n    var file = fileInput.files[0];\r\n    if (file) {\r\n      var fr = new FileReader();\r\n      fr.onload = (e) => {\r\n        setData(e.target.result);\r\n      };\r\n      fr.readAsText(file);\r\n    }\r\n  };\r\n\r\n  let saveCollection = () => {\r\n    var newDeckData = newDecks;\r\n    if (!overwrite) {\r\n      newDeckData = [...decks].concat(newDecks)\r\n    }\r\n    dispatch({ type: \"IMPORTCOLLECTION\", decks: newDeckData });\r\n    history.push('/decks');\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <h1>Import a new collection</h1>\r\n    <section>\r\n\r\n    <p>Import a collection of DeckJson decks. </p>\r\n    <pre>{'{ \"decks\": [...] }'}</pre>\r\n    <p>Tetst files can be found at <a href='https://github.com/martsve/deckjson/'>Github</a>. \r\n      (<a href='https://raw.githubusercontent.com/martsve/deckjson/master/test/Collection.json'>Collection 1</a>)\r\n    </p>\r\n\r\n    <form key='inputform' action='#' onSubmit={() => false}>\r\n      <div className='form-group'>\r\n\r\n      <label>\r\n        <Checkbox state={overwrite} setState={setOverwrite} />\r\n        <span>Overwrite existing collection</span>\r\n      </label>\r\n      </div>\r\n\r\n      <br />\r\n\r\n      <input key='fileinput' type='file' id='fileinput' onChange={readFile} />\r\n    </form>\r\n    </section>\r\n\r\n    {newDecks ? (<section>\r\n      <div className='form-group'>\r\n        <button onClick={saveCollection}>\r\n          <span className='icon-plus'></span>\r\n          Import this collection\r\n        </button>\r\n      </div>\r\n\r\n      <CollectionSummary decks={newDecks} />\r\n\r\n      <section>\r\n        <h2>Decks in the collection</h2>\r\n        <div className=\"tiles\">\r\n          <Liste list={newDecks} />\r\n        </div>\r\n      </section>\r\n      </section>) : <></>}\r\n\r\n    {parseError && <section className='error'>{parseError}</section>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n  decks: state.decks,\r\n}))(Import);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport CollectionSummary from './Summary'\r\nimport { SaveAsFile } from \"../utilities\";\r\n\r\nconst Overview = ({ decks }) => {\r\n  function exportJson() {\r\n    SaveAsFile(JSON.stringify({ decks: decks }, null, 2), \"Collection.json\");\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <section>\r\n      <h2>Import/Export</h2>\r\n      <div className='tiles'>\r\n        <Link to='/collection/import' className='tile'>\r\n          <div className='container'>\r\n            <div className='art'>\r\n              <span className='icon-upload-cloud large'></span>\r\n            </div>\r\n            <span className='title'>Import collection</span>\r\n          </div>\r\n        </Link>\r\n        <Link to='#' className='tile' onClick={exportJson}>\r\n          <div className='container'>\r\n            <div className='art'>\r\n              <span className='icon-download-cloud large'></span>\r\n            </div>\r\n            <span className='title'>Export collection</span>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    </section>\r\n\r\n    <CollectionSummary decks={decks} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n  decks: state.decks,\r\n}))(Overview);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport NotFound from '../ErrorPages';\r\nimport { default as Import }  from './Import';\r\nimport Overview from './Overview';\r\n\r\nconst Index = ({ decks }) => {\r\n  return (\r\n    <>\r\n    <div className=\"Main\">\r\n      <Switch>\r\n        <Route path=\"/collection/import\" component={Import} />\r\n        <Route path=\"/collection\" component={Overview} />\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({\r\n  decks: state.decks,\r\n}))(Index);\r\n","const initialState = {\r\n    stateVersion: 0,\r\n    decks: []\r\n};\r\n\r\nexport default initialState;","import initialState from './state';\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n      case 'INCREMENT':\r\n        return {\r\n          ...state,\r\n          count: state.count + 1\r\n        };\r\n                              \r\n        case 'DELETEDECK':\r\n          let index = state.decks.findIndex((x) => x.id === action.id); \r\n          return {\r\n            ...state,\r\n            decks: [\r\n              ...state.decks.slice(0, index),\r\n              ...state.decks.slice(index + 1)\r\n            ]\r\n          };\r\n\r\n        case 'UPDATEDECK':\r\n          var newState = { ...state };\r\n          newState.decks[action.index] = { ...action.deck };\r\n          return newState;\r\n\r\n        case 'SAVEDECK':\r\n          return {\r\n            ...state,\r\n            decks: [\r\n              ...state.decks,\r\n              action.deck\r\n            ]\r\n          };\r\n\r\n        case 'IMPORTCOLLECTION':\r\n            return {\r\n              ...state,\r\n              decks: action.decks\r\n            };\r\n\r\n        case 'RESET':\r\n            localStorage.clear();\r\n          return initialState;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export { reducer };","import React from 'react';\r\nimport { reducer as reduceState } from './reducer';\r\nimport initialState from './state';\r\nimport { createStore } from 'redux';\r\n\r\nconst LOCALSTORAGEKEY = \"DECKJSON\";\r\n\r\nconst getInitialState = () => {\r\n  var data = localStorage.getItem(LOCALSTORAGEKEY);\r\n  if (data) {\r\n    try {\r\n      return JSON.parse(data);\r\n    } catch {}\r\n  }\r\n\r\n  return initialState;\r\n} \r\n\r\nexport const reducer = (state = getInitialState(), action) => {\r\n  const newState = reduceState(state, action);\r\n  localStorage.setItem(LOCALSTORAGEKEY, JSON.stringify(newState));\r\n  return newState;\r\n}\r\n\r\nexport const context = React.createContext(null);\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport default { store, reducer, context };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Configuration from '../modules/Configuration';\r\nimport { default as DeckOverview } from '../modules/Decks/Index';\r\nimport { default as CollectionOverview } from '../modules/Collection/Index';\r\nimport NotFound from '../modules/ErrorPages';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { Route, HashRouter as Router, Switch, NavLink, Redirect  } from 'react-router-dom'\r\nimport { store } from '../store';\r\n\r\nconst IndexPage = () => (<Redirect to=\"/decks/\" />);\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router basename='/'>\r\n        <nav className='sm-flex'>\r\n          <NavLink exact activeClassName='active' to=\"/\"><span className='icon-home medium'></span></NavLink>\r\n          <NavLink activeClassName='active' to=\"/decks/\">Decks</NavLink>\r\n          <NavLink activeClassName='active' to=\"/collection/\">Collection</NavLink>\r\n          <NavLink activeClassName='active' to=\"/config\"><span className='icon-cog medium'></span></NavLink>\r\n        </nav>\r\n        <div className=\"Body\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={IndexPage} />\r\n            <Route path=\"/decks\" component={DeckOverview} />\r\n            <Route path=\"/collection\" component={CollectionOverview} />\r\n            <Route path=\"/config\" component={Configuration} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Router/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}